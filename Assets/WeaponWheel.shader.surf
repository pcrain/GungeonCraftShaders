Shader "Custom/WeaponWheelShader"
{
    Properties
    {
        _Resolution ("Resolution", Range(32, 128)) = 32
        _Color ("Fill Color", Vector) = (1,1,1,1)
        _OutlineColor ("Outline Color", Vector) = (0,0,0,1)
        _OutlineWidth ("Outline Thickness", Range(0, 10)) = 1
        _LowBound ("Low Bound", Range(0, 1)) = 0
        _HighBound ("High Bound", Range(0, 1)) = 1
        _Rotation ("Rotation", Range(0, 360)) = 0
        _Angle ("Angle", Range(0, 360)) = 360
    }

    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 200

        CGPROGRAM
        #pragma surface surf Standard fullforwardshadows

        struct Input
        {
            float2 uv_MainTex;
        };

        fixed4 _Color;
        fixed4 _OutlineColor;
        float _Resolution;
        float _OutlineWidth;
        float _HighBound;
        float _LowBound;
        float _Rotation;
        float _Angle;

        float2 snap_vector (float2 x, float2 res)
        {
            return floor(x / res) * res;
        }

        void surf (Input IN, inout SurfaceOutputStandard o)
        {
            fixed4 col = _Color;

            const float pi = 3.14159265;
            const float deg2rad = pi / 180;
            const float rad2deg = 180 / pi;
            float2 res = float2(_Resolution, _Resolution);
            float2 texelCoord = snap_vector(IN.uv_MainTex, res).xy;
            float2 center = snap_vector(float4(0.5, 0.5, 0, 0), res).xy;
            float outlineTexelWidth = _OutlineWidth / res * 2;
            float dist = distance(center, texelCoord);

            // ------ CLIP DISC SHAPE ------
            if (dist >= _HighBound) discard;
            if (dist < _LowBound) discard;

            // ------ CLIP ARC SHAPE ------
            float startAngle = _Rotation - (360 - _Angle) / 2;
            float endAngle = _Rotation + (360 - _Angle) / 2;

            float offset0 = clamp(startAngle + 360, 0, 360);
            float offset360 = clamp(endAngle - 360, 0, 360);

            float2 atan2Coord = float2(lerp(-1, 1, texelCoord.x - 0.5), lerp(-1, 1, texelCoord.y - 0.5));
            float atanAngle = atan2(atan2Coord.y, atan2Coord.x) * rad2deg;

            if (atanAngle < 0) atanAngle = 360 + atanAngle;
            if (atanAngle > startAngle && atanAngle <= endAngle) discard;
            if (atanAngle < offset360) discard;
            if (atanAngle > offset0) discard;

            // ------ OUTLINE ARC SHAPE ------
            float startRadians = startAngle * deg2rad;
            float endRadians = endAngle * deg2rad;
            float centerRadians = _Rotation * deg2rad;
            float2 startOutlinePoint = float2(sin(-startRadians), cos(-startRadians)) * dist + float2(cos(startRadians), sin(startRadians)) * outlineTexelWidth;
            float2 endOutlinePoint = float2(sin(-endRadians), cos(-endRadians)) * dist + float2(cos(endRadians), sin(endRadians)) * -outlineTexelWidth;
            float2 rotationCenterPoint = float2(sin(-centerRadians), cos(-centerRadians));
            float startDot = dot(startOutlinePoint, atan2Coord);
            float endDot = dot(endOutlinePoint, atan2Coord);
            float centerDot = dot(rotationCenterPoint, atan2Coord);

            if (_Angle < 360)
            {
                if (centerDot >= 0 && endDot < 0) col = _OutlineColor;
                if (centerDot <= 0 && startDot > 0) col = _OutlineColor;
            }

            // ------ OUTLINE DISC ------
            if (dist >= _HighBound - outlineTexelWidth) col = _OutlineColor;
            if (dist < _LowBound + outlineTexelWidth) col = _OutlineColor;

            o.Albedo = col.rgb;
            o.Alpha = col.a;
        }
        ENDCG
    }

    FallBack "Diffuse"
}
